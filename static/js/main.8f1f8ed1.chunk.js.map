{"version":3,"sources":["imgs/president-icon-white.svg","imgs/github-mark.svg","requests.js","Component/HTTPRequest.js","Component/RequestBody.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","default","get","url","post","body","put","delete","validPost","resource","born","partner","validPut","Object","keys","length","prepare","verb","date","Date","died","data","String","toLowerCase","HTTPRequest","apiURL","onVerbSelect","onResourceSelect","onIdChange","className","onChange","value","type","name","placeholder","idBox","RequestBody","onHTTPRequest","requestBody","handleInput","e","target","onClick","requests","firstFamilyURL","App","useState","setVerb","setResource","id","setID","firstFamilyData","setFirstFamilyData","newHTTPRequest","setNewHTTPRequest","useEffect","fetch","then","res","json","console","log","makeHTTPRequest","href","src","presIcon","alt","preventDefault","JSON","stringify","gitHub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f1f8ed1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/president-icon-white.dac9b2ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-mark.63315502.svg\";","\r\nconst axios = require(`axios`).default\r\n\r\nmodule.exports = {\r\n\r\n  /* Helper functions to make HTTP requests */\r\n\r\n  get: (url) => {\r\n    return axios.get(url)\r\n  },\r\n\r\n  post: (url, body) => {\r\n    return axios.post(url, body)\r\n  },\r\n\r\n  put: (url, body) => {\r\n    return axios.put(url, body)\r\n  },\r\n  delete: (url) => {\r\n    return axios.delete(url)\r\n  },\r\n\r\n  // Check if the minimally required entries are included\r\n  validPost: (body, resource) => {\r\n    if (resource === 'president'){\r\n      return (body[\"_id\"] && body.born)\r\n    } else if (resource === 'firstSpouse'){\r\n      return (body[\"_id\"] && body.partner !== [\"\"] && body.born)\r\n    }\r\n  },\r\n\r\n  // Check if there is at least one entry that has changed\r\n  validPut: (body) => {\r\n    return (Object.keys(body).length !== 0)\r\n  },\r\n\r\n  /* Helper functions to prepare the body for the HTTP requests */\r\n  prepare: (body, verb) => {\r\n\r\n      // Convert date strings into Date objects\r\n      if (body.date){\r\n        body.date = new Date(body.date)\r\n      }\r\n      if (body.born){\r\n        body.born = new Date(body.born)\r\n      }\r\n      if (body.died){\r\n        body.died = new Date(body.died)\r\n      }\r\n        \r\n      return body\r\n      \r\n  },\r\n\r\n  data: (verb, url, body) => {\r\n\r\n    this[String.toLowerCase(verb)]()\r\n\r\n  }\r\n}","import React from 'react'\r\n\r\nimport '../style/HTTPRequest.css'\r\n\r\n\r\nconst HTTPRequest = ({apiURL, onVerbSelect, onResourceSelect, onIdChange, verb}) => {\r\n    \r\n    // Conditionally render the _id field so that users do not input an _id\r\n    // when they do not have to\r\n    const idBox = (verb) => {\r\n        if (verb !== 'POST'){\r\n            return(\r\n                <input \r\n                    type=\"text\" \r\n                    name = \"_id\" \r\n                    placeholder=\"1\"\r\n                    onChange={onIdChange}\r\n                />\r\n            )\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <form className=\"HTTP-request\">\r\n            <div className=\"request-line\">                \r\n                <select onChange={onVerbSelect}>\r\n                    <option value=\"GET\"> GET </option>            \r\n                    <option value=\"POST\"> POST </option>            \r\n                    <option value=\"PUT\"> PUT </option>            \r\n                    <option value=\"DELETE\"> DELETE </option>            \r\n                </select>\r\n                <div className=\"request-url\">\r\n                    <p>{apiURL}</p>\r\n                </div>\r\n                <select onChange={onResourceSelect}>\r\n                    <option value=\"president\"> president </option>            \r\n                    <option value=\"firstSpouse\"> firstSpouse </option>                       \r\n                </select>\r\n                <div className=\"request-url\">\r\n                    <p>/</p>\r\n                </div>\r\n                \r\n                {idBox(verb)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default HTTPRequest","import React from 'react'\r\n\r\nimport '../style/HTTPRequest.css'\r\n\r\n\r\nconst RequestBody = ({verb, resource, onHTTPRequest}) => {\r\n    \r\n    let requestBody = {}\r\n\r\n    let handleInput = (e) => {\r\n\r\n        let name = e.target.name\r\n\r\n        if (name === \"partner\"){\r\n            requestBody[name] = [e.target.value]\r\n        } else {\r\n            requestBody[name] = e.target.value\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    if(verb === \"POST\" | verb === 'PUT'){\r\n        return(\r\n            <div className=\"HTTP-body\">\r\n            <form>\r\n                <div className=\"form-item\">\r\n                    <label> _id: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name = \"_id\" \r\n                        placeholder=\"1\" \r\n                        onChange={handleInput}/>\r\n                    </div>\r\n                <div className=\"form-item\">\r\n                    <label> name: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name = \"name\" \r\n                        placeholder=\"George Washington\"\r\n                        onChange={handleInput}/>\r\n                    </div>\r\n                <div className=\"form-item\">\r\n                    <label> partner: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name = \"partner\" \r\n                        placeholder='1p'\r\n                        onChange={handleInput}/>\r\n                    </div>\r\n                <div className=\"form-item\">\r\n                    <label> born: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name = \"born\" \r\n                        placeholder=\"1732-02-22\"\r\n                        onChange={handleInput}/>\r\n                    </div>\r\n                <div className=\"form-item\">\r\n                    <label> died: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name = \"username\" \r\n                        placeholder=\"1802-05-22\"\r\n                        onChange={handleInput}/>\r\n                </div>\r\n            </form>\r\n            <button \r\n                type=\"submit\" \r\n                className=\"submit\" \r\n                onClick={e => onHTTPRequest(e, requestBody)}> \r\n                SUBMIT \r\n            </button>\r\n            </div>\r\n        )\r\n    } else{\r\n        return (\r\n            <div className=\"HTTP-body\">\r\n                <button type=\"submit\" className=\"submit\" onClick={onHTTPRequest}> SUBMIT </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RequestBody;","import React, { useEffect, useState } from 'react'\r\n\r\nimport presIcon from './imgs/president-icon-white.svg'\r\nimport gitHub from './imgs/github-mark.svg'\r\n\r\nimport HTTPRequest from './Component/HTTPRequest'\r\nimport RequestBody from './Component/RequestBody'\r\n\r\nimport './style/App.css'\r\n\r\nconst requests = require('./requests.js')\r\n\r\nconst firstFamilyURL = 'https://first-families-api.herokuapp.com/'\r\n\r\nfunction App() {\r\n\r\n  const [verb, setVerb] = useState('GET')\r\n  const [resource, setResource] = useState('president')\r\n  const [id, setID] = useState('')\r\n\r\n  const [firstFamilyData, setFirstFamilyData] = useState([''])\r\n\r\n  const [newHTTPRequest, setNewHTTPRequest] = useState(true)\r\n\r\n  useEffect(() => {\r\n    fetch(firstFamilyURL)\r\n    .then(res=> res.json())\r\n    .then(data => {\r\n      setFirstFamilyData(data)\r\n      console.log('Fetched data from API')\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('It worked')\r\n  }, [newHTTPRequest])\r\n\r\n  const makeHTTPRequest = (verb, url, body) => {\r\n\r\n    if (verb === 'GET'){\r\n      console.log(url)\r\n      requests.get(url)\r\n        .then( res => {\r\n          setFirstFamilyData(res.data)\r\n        })\r\n    } else if (verb === 'POST') {\r\n      if (requests.validPost(body, resource)){\r\n       requests.post(url, body)\r\n        .then( res => {\r\n          setFirstFamilyData(res.data)\r\n        })\r\n      } else{\r\n        console.log(\"Invalid POST\")\r\n      }\r\n    } else if (verb === 'PUT'){\r\n      if (requests.validPut(body, resource)){\r\n        requests.put(url, body)\r\n        .then( res => {\r\n          setFirstFamilyData(res.data)\r\n        })\r\n      } else{\r\n        console.log(\"Invalid POST\")\r\n      }\r\n    } else if (verb === 'DELETE'){\r\n      requests.delete(url)\r\n        .then( res => {\r\n          setFirstFamilyData(res.data)\r\n        })\r\n    }\r\n\r\n    setNewHTTPRequest(false)\r\n\r\n  }\r\n\r\n  const handleVerbSelect = (e) => {\r\n    setVerb(e.target.value)\r\n  }\r\n\r\n  const handleResourceSelect = (e) => {\r\n    setResource(e.target.value)\r\n  }\r\n\r\n  const handleIdInput = (e) => {\r\n    setID(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e, body) => {      \r\n  \r\n\r\n    if (body){\r\n      requests.prepare(body, verb)\r\n\r\n      if(verb === 'PUT'){\r\n        makeHTTPRequest(verb, `${firstFamilyURL}${resource}/${id}`, body)\r\n      } else {\r\n        makeHTTPRequest(verb, `${firstFamilyURL}${resource}`, body)\r\n      }\r\n      \r\n    } else {\r\n      makeHTTPRequest(verb, `${firstFamilyURL}${resource}/${id}`)\r\n    }\r\n\r\n    e.preventDefault()\r\n  }\r\n\r\n  const stringify = (json) => {\r\n    return (\r\n    <pre>\r\n        {\r\n        `${JSON.stringify(json, null, '\\t')}`\r\n        }\r\n    </pre>\r\n    )\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <a href=\"./\">\r\n          <img src={presIcon}  alt=\"logo\" />\r\n        </a>\r\n        <h1>First Families API</h1>\r\n      </header>\r\n\r\n      <main>\r\n\r\n        <HTTPRequest \r\n          apiURL = {firstFamilyURL}  \r\n          onVerbSelect = {handleVerbSelect}\r\n          onResourceSelect ={handleResourceSelect}\r\n          onIdChange={handleIdInput}\r\n          verb = {verb} \r\n        />\r\n\r\n        <RequestBody \r\n          verb = {verb}\r\n          onHTTPRequest = {handleSubmit}\r\n        />\r\n\r\n        <div className =\"request-output\">\r\n          {stringify(firstFamilyData)}\r\n        </div>\r\n\r\n      </main>\r\n      <footer className=\"App-footer\">\r\n        <a href=\"https://github.com/iandemed\">\r\n          <img src = {gitHub} alt=\"GitHub\"/>\r\n        </a>\r\n      </footer>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n//<button onClick={getPresidents}> GET </button>}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}